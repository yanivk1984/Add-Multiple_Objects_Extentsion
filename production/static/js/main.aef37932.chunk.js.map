{"version":3,"sources":["components/topBar.js","components/object.js","components/objects.js","components/dropdown.js","components/submit.js","static/js/checkPointInteractions.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","style","backgroundColor","height","alignItems","border","marginBottom","fontFamily","marginLeft","React","Component","Obj","prop","handleChange","e","props","handleCellChange","state","id","target","name","value","this","index","onChange","ip","comment","onClick","deleteObject","className","Objects","display","width","validateIp","test","trim","alert","addObject","resetTable","objects","map","obj","key","Dropdown","console","log","selected","type","submitGroup","showGroups","data-toggle","aria-haspopup","aria-expanded","groups","dropItem","changeDropdownValue","Submit","container","padding","position","buttonStyle","general","input","firstBtn","submit","addObjects","a","interactions","SmartConsoleInteractions","requestCommit","then","JSON","stringify","App","getGroups","dropdown","length","groupNames","alerts","group","setState","checkIfNameExists","counter","tmp_name","i","parseInt","toString","checkIfIpExists","ip_tmp","lastDigit","match","replace","push","objName","filter","parseObjects","parseObjectsGroup","message","openAlert","duration","includes","parsedObjects","invokeChanges","messageLower","groupName","Boolean","window","location","hostname","options","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.aef37932.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class TopBar extends React.Component {\r\n    render() {\r\n        const style = {\r\n            backgroundColor: \"#E65684\",\r\n            height: \"50px\",\r\n            alignItems: \"center\",\r\n            border: \"black solid 1px\",\r\n            marginBottom: \"10px\",\r\n            fontFamily: \"Sans-Serif\",\r\n        };\r\n        const textStyle = {\r\n            marginLeft: \"10px\"\r\n        };\r\n\r\n        return (\r\n            <div style={style}>\r\n                <h3 style={textStyle}>Check Point Object Adder</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nclass Obj extends React.Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleCellChange(this.props.state.id, e.target.name, e.target.value)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.index}</td>\r\n                <td><input value={this.props.state.name} name=\"name\"\r\n                           onChange={this.handleChange}/></td>\r\n                <td><input value={this.props.state.ip} name=\"ip\"\r\n                           onChange={this.handleChange}/></td>\r\n                <td><input value={this.props.state.comment} name=\"comment\"\r\n                           onChange={this.handleChange}/></td>\r\n                <td onClick={() => this.props.deleteObject(this.props.state.name)}>\r\n                    <button className=\"btn btn-danger\">Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Obj","import React from 'react'\r\nimport Obj from \"./object\";\r\n\r\nclass Objects extends React.Component {\r\n    style = {\r\n        display: \"inline\",\r\n        width: \"60%\"\r\n    };\r\n\r\n    validateIp = () => {\r\n        if (!/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(this.props.state.ip.trim())) {\r\n            alert(\"This is not valid ip-address\");\r\n            return \"\"\r\n        }\r\n        this.props.addObject()\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <table style={this.style} className=\"table table-hover\">\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Object Name</th>\r\n                    <th>IP Address</th>\r\n                    <th>Comment</th>\r\n                    <th>\r\n                        <button onClick={this.props.resetTable} className=\"btn btn-info\">Reset</button>\r\n                    </th>\r\n\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                    <td>#</td>\r\n                    <td><input value={this.props.state.name} name=\"name\" onChange={this.props.handleChange}/></td>\r\n                    <td><input value={this.props.state.ip} name=\"ip\" onChange={this.props.handleChange}/></td>\r\n                    <td><input value={this.props.state.comment} name=\"comment\" onChange={this.props.handleChange}/></td>\r\n                    <td>\r\n                        <button onClick={this.validateIp} onChange={this.handleChange} className=\"btn btn-primary\">Add\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n\r\n                {this.props.state.objects.map((obj, index) => (\r\n                    <Obj\r\n                        key={index}\r\n                        index={index}\r\n                        state={obj}\r\n                        handleCellChange={this.props.handleCellChange}\r\n                        deleteObject={this.props.deleteObject}\r\n                    />\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Objects","import React from \"react\";\r\n\r\nclass Dropdown extends React.Component {\r\n    render() {\r\n        return (\r\n                <div className=\"btn-group m-2\">\r\n                    {console.log(this.props.selected)}\r\n                    <button type=\"button\" onClick={this.props.submitGroup} className=\"btn btn-success\">{this.props.selected}</button>\r\n                    <button type=\"button\" onClick={this.props.showGroups} className=\"btn btn-success dropdown-toggle dropdown-toggle-split\"\r\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        <span className=\"sr-only\"></span>\r\n                    </button>\r\n                    <div className=\"dropdown-menu\">\r\n                        {this.props.groups.map(dropItem => (\r\n                            <h5 key={dropItem} onClick={() => this.props.changeDropdownValue(dropItem)} className=\"dropdown-item\" >{dropItem}</h5>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Dropdown;","import React from \"react\";\r\nimport Dropdown from \"./dropdown\"\r\n\r\nexport class Submit extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.container = {\r\n            border: \"solid black 1px\",\r\n            marginLeft: \"40px\",\r\n            display: \"inline\",\r\n            padding: \"20px\",\r\n            position: \"absolute\"\r\n        };\r\n\r\n        this.buttonStyle = {\r\n            marginLeft: \"10px\",\r\n            backgroundColor: \"green\",\r\n            border: \"none\",\r\n            display: \"inline\",\r\n        };\r\n\r\n        this.general = {\r\n            position: \"relative\",\r\n            display: \"inline\",\r\n        };\r\n\r\n        this.input = {\r\n            display: \"inline\",\r\n            height: \"30px\",\r\n            padding: \"0px !important\",\r\n            marginLeft: \"10px\",\r\n            marginBottom: \"0px\"\r\n        };\r\n\r\n        this.firstBtn = {\r\n            display: \"block\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.container}>\r\n                <button style={{...this.buttonStyle, ...this.firstBtn}} className=\"btn btn-primary\" onClick={this.props.submit} >Submit</button>\r\n                <div style={this.general}>\r\n                    <Dropdown\r\n                        submitGroup={this.props.submitGroup}\r\n                        groups={this.props.groups}\r\n                        selected={this.props.selected}\r\n                        showGroups={this.props.showGroups}\r\n                        changeDropdownValue={this.props.changeDropdownValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import SmartConsoleInteractions from \"smart-console-interactions\";\r\n\r\n\r\n// export function showGroups() {\r\n//     // eslint-disable-next-line no-undef\r\n//     console.log(JSON.stringify(smxProxy));\r\n//     let command = {\r\n//         \"command\": \"show groups\",\r\n//         \"parameters\": {\"offset\": 0, \"limit\": 500, \"details-level\": \"standard\"}\r\n//     };\r\n//     // eslint-disable-next-line no-undef\r\n//     smxProxy.sendRequest(\"run-readonly-command\",command, \"onCommit\");\r\n// }\r\n\r\n\r\nexport async function addObjects(objects) {\r\n    const interactions = new SmartConsoleInteractions();\r\n    try {\r\n        let obj = await interactions.requestCommit(objects).then();\r\n        console.log(\"-> obj\", JSON.stringify(obj));\r\n        return obj;\r\n    } catch (e) {\r\n        return e;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\nimport {TopBar} from \"./components/topBar\";\nimport Objects from \"./components/objects\";\nimport {Submit} from \"./components/submit\";\nimport Alert, {openAlert} from \"simple-react-alert\";\nimport {addObjects, showGroups} from \"./static/js/checkPointInteractions\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            ip: \"\",\n            comment: \"\",\n            id: 0,\n            parsedObjects: [],\n            objects: [],\n            dropdown: {\n                groups: [],\n                selected: \"Submit To Group\"\n            }\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    getGroups = () => {\n        (async () => {\n            console.log(\"get groups started\")\n            if (this.state.dropdown.groups.length > 0)\n                return;\n\n            await addObjects([\"show groups limit 500 offset 0 --format json\"]).then(groups => {\n                let groupNames = [];\n                this.alerts(`Fetched ${groups.length} Groups`, \"danger\");\n                try {\n                    groupNames = groups[0].objects.map(group => group.name);\n                    this.alerts(`Fetched ${groups.length} Groups`);\n                } catch (e) {\n                    this.alerts(`No Object Fetched (API Error)`, \"danger\");\n                    groupNames = [];\n                }\n                this.setState({dropdown: {groups: groupNames}});\n            });\n\n        })();\n    };\n\n    handleChange = e => {\n        this.setState({[e.target.name]: e.target.value});\n    };\n\n    resetTable = () => {\n        let objects = [];\n        this.setState({objects});\n    };\n\n    handleCellChange = (id, name, value) => {\n        let objects = this.state.objects.map(obj => {\n            if (obj.id === id) {\n                obj[name] = value;\n            }\n            return obj;\n        });\n        this.setState(objects);\n    };\n\n    checkIfNameExists = (name) => {\n        let counter = \"1\";\n        let tmp_name = name;\n        for (let i = 0; i < this.state.objects.length; i++) {\n            if (this.state.objects[i].name === tmp_name) {\n                parseInt(counter);\n                counter++;\n                tmp_name = name + \"_\" + counter.toString();\n                i = 0;\n            }\n        }\n        return tmp_name;\n    };\n\n    checkIfIpExists = ip => {\n        let ip_tmp = ip;\n        for (let i = 0; i < this.state.objects.length; i++) {\n            if (this.state.objects[i].ip === ip_tmp) {\n                let lastDigit = parseInt(ip_tmp.match(/\\d+$/).toString());\n                lastDigit++;\n                ip_tmp = ip.replace(/\\d+$/, lastDigit.toString());\n                i = 0;\n            }\n        }\n        return ip_tmp;\n    };\n\n    addObject = () => {\n        let name = this.checkIfNameExists(this.state.name.trim());\n        let ip = this.checkIfIpExists(this.state.ip.trim());\n        let comment = this.state.comment;\n\n        if (name && ip) {\n            let objects = [...this.state.objects];\n            let id = this.state.id + 1;\n            this.setState({id});\n\n            objects.push({\n                id: id,\n                name: name,\n                ip: ip,\n                comment: comment\n            });\n            this.setState({objects: objects});\n        }\n    };\n\n    deleteObject = objName => {\n        let objects = [...this.state.objects];\n        objects = objects.filter(obj => obj.name !== objName);\n        this.setState({objects: objects});\n    };\n\n    parseObjects = () => {\n        return this.state.objects.map(obj => {\n            const {name, ip, comment} = {...obj};\n            return `add host name ${name} ip-address ${ip} comments \"${comment}\" --format json`;\n        });\n    };\n\n    parseObjectsGroup = () => {\n        return this.state.objects.map(obj => {\n            const {name, ip, comment} = {...obj};\n            return `add host name ${name} ip-address ${ip} comments \"${comment}\" groups.1 \"${this.state.dropdown.selected}\" --format json`;\n        });\n    };\n\n    alerts = (message, type) => {\n        openAlert({message: message, type: type, duration: 20000});\n    };\n\n    submitGroup = () => {\n        (async () => {\n            if (this.state.dropdown.selected.includes(\"Submit To Group\")){\n                this.alerts(\"Please choose a group first\", 'warning')\n                return;\n            }\n            let parsedObjects = this.parseObjectsGroup();\n            await this.setState({parsedObjects});\n            this.invokeChanges();\n        })();\n    };\n\n    submit = () => {\n        (async () => {\n            let parsedObjects = this.parseObjects();\n            await this.setState({parsedObjects});\n            this.invokeChanges();\n        })();\n    };\n\n    changeDropdownValue = value => {\n        let dropdown = {...this.state.dropdown};\n        dropdown.selected = value;\n        this.setState({dropdown});\n    };\n\n    invokeChanges = () => {\n        (async () => {\n            await addObjects(this.state.parsedObjects).then(message => {\n                message = JSON.stringify(message);\n                let messageLower = message;\n                if ((messageLower.includes(\"code\") && messageLower.includes(\"message\")) || messageLower.includes(\"error\") || messageLower.includes(\"fail\") || messageLower.includes(\"err\") || messageLower.includes(\"reject\") || messageLower.includes(\"denied\"))\n                    this.alerts(message, \"danger\");\n                else\n                    this.alerts(\"Success\", \"success\");\n            });\n        })();\n    };\n\n    render() {\n        return (\n            <div>\n                <Alert/>\n                <TopBar/>\n                <Objects\n                    state={this.state}\n                    addObject={this.addObject}\n                    deleteObject={this.deleteObject}\n                    handleCellChange={this.handleCellChange}\n                    handleChange={this.handleChange}\n                    resetTable={this.resetTable}\n                />\n                <Submit\n                    submit={this.submit}\n                    submitGroup={this.submitGroup}\n                    groupName={this.state.groupName}\n                    handleChange={this.handleChange}\n                    groups={this.state.dropdown.groups}\n                    selected={this.state.dropdown.selected}\n                    showGroups={this.getGroups}\n                    changeDropdownValue={this.changeDropdownValue}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.min.js'\nimport * as serviceWorker from './serviceWorker';\nimport {positions, Provider as AlertProvider, transitions} from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\nconst options = {\n    position: positions.BOTTOM_CENTER,\n    timeout: 5000,\n    offset: '30px',\n    transition: transitions.SCALE\n};\n\nconst Root = () => (\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App/>\n    </AlertProvider>\n)\n\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}